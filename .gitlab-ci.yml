stages:
  - install
  - build
  - test
  - deploy

before_script:
  - cd client
  

install:
  stage: install
  image: node:14.9-alpine3.12
  script:
    - npm install
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/

build:
  stage: build
  image: node:14.9-alpine3.12
  script:
    - npm run build
  needs: ["install"]
  cache:
    key:
      files:
        - package-lock.json
    policy: pull
    paths:
      - node_modules/
  artifacts:
    expire_in: 1 week
    paths:
      - client/.firebaserc
      - client/build
      - client/firebase.json

lint:
  stage: test
  image: node:14.9-alpine3.12
  needs: ["install"]
  cache:
    key:
      files:
        - package-lock.json
    policy: pull
    paths:
      - node_modules/
  script:
    - npm run lint

test:
  stage: test
  image: node:14.9-alpine3.12
  needs: ["install"]
  cache:
    key:
      files:
        - package-lock.json
    policy: pull
    paths:
      - node_modules/
  script:
    - npm run test

deploy:review:
  image: andreysenov/firebase-tools:latest
  stage: deploy
  before_script:
    - cd client
    - firebase use $ENVIRONMENT --token $FIREBASE_TOKEN
  script:
    - firebase hosting:channel:deploy $CI_ENVIRONMENT_SLUG --token $FIREBASE_TOKEN 
    - echo "ENVIRONMENT_URL=$(firebase hosting:channel:open $CI_ENVIRONMENT_SLUG --non-interactive | awk '{ print $3 }')" >> deploy.env
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: $ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    ENVIRONMENT: staging
  only:
    - branches
  except:
    - master

deploy:staging:
  image: andreysenov/firebase-tools:latest
  stage: deploy
  before_script:
    - firebase use $ENVIRONMENT
  script:
    - firebase deploy
        --token $FIREBASE_TOKEN
        --message "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID"
        --non-interactive
        --only hosting
    - echo "ENVIRONMENT_URL=$(firebase hosting:channel:open live --non-interactive | awk '{ print $3 }')" >> deploy.env
  environment:
    name: staging
    url: $ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    ENVIRONMENT: staging
  only:
    - master

deploy:production:
  extends: deploy:staging
  environment:
    name: production
  variables:
    ENVIRONMENT: production
  when: manual